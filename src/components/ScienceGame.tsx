import { useState, useEffect, useRef } from "react";
import AOS from "aos";
import { Button } from "./ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "./ui/card";
import { Badge } from "./ui/badge";
import {
  ArrowLeft,
  Gamepad2,
  Zap,
  Cpu,
  Leaf,
  Battery,
} from "lucide-react";
import Phaser from "phaser";
import type { UserData } from "../App";
import { PhaserManager } from "../lib/phaser-manager";

interface ScienceGameProps {
  language: string;
  onBack: () => void;
  userData?: UserData;
}

/* Translations (matching pattern used in MathGame) */
const translations = {
  en: {
    title: "Science Games",
    selectGame: "Select a Game",
    backToDashboard: "Back to Dashboard",
    circuitConnect: "Circuit Connect",
    circuitConnectDesc:
      "Assemble a working circuit to light the bulb!",
    statesMatter: "States of Matter",
    statesMatterDesc:
      "Sort items into solid, liquid, or gas bins.",
    plantParts: "Plant Parts",
    plantPartsDesc: "Label and place parts of a plant.",
    foodChain: "Food Chain",
    foodChainDesc: "Build the correct food chain sequence.",
    playNow: "Play Now",
    backToGames: "Back to Games",
    retry: "Retry",
    howToPlay: "How to Play",
    backToMenu: "Back to Menu",
    instructions: "Instructions",
  },
  hi: {
    title: "рд╡рд┐рдЬреНрдЮрд╛рди рдЦреЗрд▓",
    selectGame: "рдПрдХ рдЦреЗрд▓ рдЪреБрдиреЗрдВ",
    backToDashboard: "рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рд╡рд╛рдкрд╕",
    circuitConnect: "рд╕рд░реНрдХрд┐рдЯ рдЬреЛрдбрд╝реЗрдВ",
    circuitConnectDesc: "рдмрд▓реНрдм рдХреЛ рдЬрд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рд░реНрдХрд┐рдЯ рдмрдирд╛рдПрдБ!",
    statesMatter: "рдкрджрд╛рд░реНрде рдХреА рдЕрд╡рд╕реНрдерд╛рдПрдБ",
    statesMatterDesc: "рдЖрдЗрдЯрдореНрд╕ рдХреЛ рдареЛрд╕/рддрд░рд▓/рдЧреИрд╕ рдореЗрдВ рд░рдЦреЗрдВред",
    plantParts: "рдкреМрдзреЗ рдХреЗ рднрд╛рдЧ",
    plantPartsDesc: "рдкреМрдзреЗ рдХреЗ рднрд╛рдЧреЛрдВ рдХреЛ рдЪрд┐рдиреНрд╣рд┐рдд рдХрд░реЗрдВред",
    foodChain: "рдЦрд╛рджреНрдп рд╢реНрд░реГрдВрдЦрд▓рд╛",
    foodChainDesc: "рд╕рд╣реА рдЦрд╛рджреНрдп рд╢реНрд░реГрдВрдЦрд▓рд╛ рдмрдирд╛рдУред",
    playNow: "рдЕрднреА рдЦреЗрд▓реЗрдВ",
    backToGames: "рдЦреЗрд▓реЛрдВ рдкрд░ рд╡рд╛рдкрд╕",
    retry: "рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ",
    howToPlay: "рдХреИрд╕реЗ рдЦреЗрд▓реЗрдВ",
    backToMenu: "рдореЗрдиреВ рдкрд░ рд╡рд╛рдкрд╕",
    instructions: "рдирд┐рд░реНрджреЗрд╢",
  },
  od: {
    title: "рммрм┐рмЬрнНрмЮрм╛рми рмЦрнЗрм│",
    selectGame: "рмПрмХ рмЦрнЗрм│ рммрм╛рмЫрмирнНрмдрнБ",
    backToDashboard: "рмбрнНрнЯрм╛рм╕рммрнЛрм░рнНрмбрмХрнБ рмлрнЗрм░рмирнНрмдрнБ",
    circuitConnect: "рм╕рм░рнНрмХрм┐рмЯ рмпрнЛрмбрмирнНрмдрнБ",
    circuitConnectDesc:
      "рммрм▓рнНрммрмХрнБ рмЬрм▓рм╛рмЗрммрм╛ рмкрм╛рмЗрмБ рм╕рм░рнНрмХрм┐рмЯ рмдрм┐рмЖрм░рм┐ рмХрм░рмирнНрмдрнБ!",
    statesMatter: "рмкрмжрм╛рм░рнНрме рмЕрммрм╕рнНрмерм╛",
    statesMatterDesc:
      "рм╕рм╛рмормЧрнНрм░рнАрмЧрнБрмбрм┐рмХрнБ рмарнЛрм╕/рмдрм░рм│/рмЧрнНрнЯрм╛рм╕рм░рнЗ рммрм┐рмнрм╛рмЬрм┐рмд рмХрм░рмирнНрмдрнБред",
    plantParts: "рмЧрмЫрм░ рмЕрмВрм╢",
    plantPartsDesc: "рмЧрмЫрм░ рмЕрмВрм╢рмЧрнБрмбрм┐рмХрнБ рм╕рнНрмерм╛рми рмжрм┐рмЕрмирнНрмдрнБред",
    foodChain: "рмЦрм╛рмжрнНрнЯ рм╢рнГрмЦрм│рм╛",
    foodChainDesc: "рм╕рмарм┐рмХрнН рмЦрм╛рмжрнНрнЯ рм╢рнГрмЦрм│рм╛ рмдрм┐рмЖрм░рм┐ рмХрм░рмирнНрмдрнБред",
    playNow: "рмЦрнЗрм│рмирнНрмдрнБ",
    backToGames: "рмЦрнЗрм│рмХрнБ рмлрнЗрм░рмирнНрмдрнБ",
    retry: "рмкрнБрмирмГ рмкрнНрм░рнЯрм╛рм╕ рмХрм░рмирнНрмдрнБ",
    howToPlay: "рмХрм┐рмкрм░рм┐ рмЦрнЗрм│рм┐рммрнЗ",
    backToMenu: "рморнЗрмирнБрмХрнБ рмлрнЗрм░рмирнНрмдрнБ",
    instructions: "рмирм┐рм░рнНрмжрнНрмжрнЗрм╢рм╛рммрм│рнА",
  },
};

type GameType =
  | "menu"
  | "circuit-connect"
  | "states-matter"
  | "plant-parts"
  | "food-chain"
  | "how-to-circuit"
  | "how-to-states"
  | "how-to-plant"
  | "how-to-food";

/* Get difficulty from grade - Level 1 for 6-8, Level 2 for 9-10, Level 3 for 11-12 */
function getDifficultyFromGrade(grade?: string): number {
  if (!grade) return 1;
  const gradeNum = parseInt(grade);
  if (gradeNum <= 8) return 1;
  if (gradeNum <= 10) return 2;
  return 3;
}

// Global game control for retry functionality
let globalGameControl = {
  shouldRestart: false,
  currentScene: null as Phaser.Scene | null
};

/* ---- ScienceGame React component (UI + Phaser mount) ---- */
export function ScienceGame({
  language,
  onBack,
  userData,
}: ScienceGameProps) {
  const [currentGame, setCurrentGame] =
    useState<GameType>("menu");
  const gameContainerRef = useRef<HTMLDivElement>(null);
  const phaserGameRef = useRef<Phaser.Game | null>(null);

  const validLanguage =
    language && ["en", "hi", "od"].includes(language)
      ? language
      : "en";
  const t =
    translations[validLanguage as keyof typeof translations] ||
    translations.en;
  const difficulty = getDifficultyFromGrade(userData?.grade);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (phaserGameRef.current) {
        try {
          phaserGameRef.current.destroy(true, false);
        } catch (e) {
          // Ignore errors during cleanup
        }
        phaserGameRef.current = null;
      }
    };
  }, []);

  // Handle game creation and context events
  useEffect(() => {
    if (currentGame !== "menu" && !currentGame.startsWith("how-to-") && gameContainerRef.current) {
      // Use PhaserManager to create game
      (async () => {
        const config = getGameConfig(currentGame);
        const game = await PhaserManager.createGame(config);
        if (game) {
          phaserGameRef.current = game;
        }
      })();
    }
    
    // Cleanup when switching games
    return () => {
      PhaserManager.destroyGame();
      phaserGameRef.current = null;
    };
  }, [currentGame]);

  // Base config + mapping to scene classes (inline wrapper extends style)
  const getGameConfig = (
    gameType: GameType,
  ): Phaser.Types.Core.GameConfig => {
    const baseConfig: Phaser.Types.Core.GameConfig = {
      type: Phaser.WEBGL,
      parent: gameContainerRef.current!,
      backgroundColor: "#0b1220",
      scale: {
        mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH,
        width: 800,
        height: 600,
      },
      physics: {
        default: "arcade",
        arcade: { gravity: { x: 0, y: 0 }, debug: false },
      },
      audio: {
        noAudio: true, // Disable audio to prevent AudioContext errors
      },
      render: {
        antialias: false,
        pixelArt: false,
        roundPixels: true,
        transparent: false,
        clearBeforeRender: true,
        preserveDrawingBuffer: false,
        premultipliedAlpha: true,
        failIfMajorPerformanceCaveat: false,
        powerPreference: 'low-power',
        batchSize: 512,
      },
      fps: {
        target: 60,
        forceSetTimeOut: false,
        min: 30,
        smoothStep: true,
      },
      disableContextMenu: true,
    };

    switch (gameType) {
      case "circuit-connect":
        return {
          ...baseConfig,
          scene: class extends CircuitConnectScene {
            constructor() {
              super(difficulty);
            }
          },
        };
      case "states-matter":
        return {
          ...baseConfig,
          scene: class extends StatesOfMatterScene {
            constructor() {
              super(difficulty);
            }
          },
        };
      case "plant-parts":
        return {
          ...baseConfig,
          scene: class extends PlantPartsScene {
            constructor() {
              super(difficulty);
            }
          },
        };
      case "food-chain":
        return {
          ...baseConfig,
          scene: class extends FoodChainScene {
            constructor() {
              super(difficulty);
            }
          },
        };
      default:
        return baseConfig;
    }
  };

  const handleBackToMenu = async () => {
    await PhaserManager.destroyGame();
    phaserGameRef.current = null;
    setCurrentGame("menu");
    // Refresh AOS animations to fix visibility issue
    setTimeout(() => AOS.refresh(), 100);
  };

  const handleRetry = () => {
    globalGameControl.shouldRestart = true;
    if (globalGameControl.currentScene) {
      globalGameControl.currentScene.scene.restart();
    }
  };

  const getGameInstructions = (gameId: string) => {
    const instructions = {
      'circuit-connect': {
        en: {
          title: 'Circuit Connect - How to Play',
          steps: [
            'ЁЯФМ You need to build a complete circuit to light the bulb',
            'тЪб Drag circuit parts from the bottom area to the slots',
            'ЁЯУН Parts must be placed in correct order: Battery тЖТ Switch тЖТ Bulb тЖТ Wire',
            'тЬЕ If placed correctly, the bulb will light up!',
            'тЭМ Wrong order will reset the circuit',
            'ЁЯОп Complete the circuit to win!',
            'ЁЯУ▒ On mobile: Drag parts with your finger'
          ]
        },
        hi: {
          title: 'рд╕рд░реНрдХрд┐рдЯ рдЬреЛрдбрд╝реЗрдВ - рдХреИрд╕реЗ рдЦреЗрд▓реЗрдВ',
          steps: [
            'ЁЯФМ рдЖрдкрдХреЛ рдмрд▓реНрдм рдЬрд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рдкреВрд░реНрдг рд╕рд░реНрдХрд┐рдЯ рдмрдирд╛рдирд╛ рд╣реЛрдЧрд╛',
            'тЪб рдиреАрдЪреЗ рдХреЗ рдХреНрд╖реЗрддреНрд░ рд╕реЗ рд╕рд░реНрдХрд┐рдЯ рдХреЗ рдкреБрд░реНрдЬреЛрдВ рдХреЛ рд╕реНрд▓реЙрдЯ рдореЗрдВ рдЦреАрдВрдЪреЗрдВ',
            'ЁЯУН рдкреБрд░реНрдЬреЛрдВ рдХреЛ рд╕рд╣реА рдХреНрд░рдо рдореЗрдВ рд░рдЦрд╛ рдЬрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП: рдмреИрдЯрд░реА тЖТ рд╕реНрд╡рд┐рдЪ тЖТ рдмрд▓реНрдм тЖТ рддрд╛рд░',
            'тЬЕ рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рд░рдЦрдиреЗ рдкрд░ рдмрд▓реНрдм рдЬрд▓ рдЬрд╛рдПрдЧрд╛!',
            'тЭМ рдЧрд▓рдд рдХреНрд░рдо рд╕рд░реНрдХрд┐рдЯ рдХреЛ рд░реАрд╕реЗрдЯ рдХрд░ рджреЗрдЧрд╛',
            'ЁЯОп рд╕рд░реНрдХрд┐рдЯ рдХреЛ рдкреВрд░рд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЬреАрддреЗрдВ!',
            'ЁЯУ▒ рдореЛрдмрд╛рдЗрд▓ рдкрд░: рдЕрдкрдиреА рдЙрдВрдЧрд▓реА рд╕реЗ рдкреБрд░реНрдЬреЛрдВ рдХреЛ рдЦреАрдВрдЪреЗрдВ'
          ]
        },
        od: {
          title: 'рм╕рм░рнНрмХрм┐рмЯ рмпрнЛрмбрмирнНрмдрнБ - рмХрм┐рмкрм░рм┐ рмЦрнЗрм│рм┐рммрнЗ',
          steps: [
            'ЁЯФМ рммрм▓рнНрммрмХрнБ рмЬрм│рм╛рмЗрммрм╛ рмкрм╛рмЗрмБ рмЖрмкрмгрмЩрнНрмХрнБ рмПрмХ рм╕рмВрмкрнВрм░рнНрмгрнНрмг рм╕рм░рнНрмХрм┐рмЯ рмирм┐рм░рнНрморм╛рмг рмХрм░рм┐рммрм╛рмХрнБ рмкрмбрм┐рмм',
            'тЪб рмдрм│ рмЕрмЮрнНрмЪрм│рм░рнБ рм╕рм░рнНрмХрм┐рмЯ рмЕрмВрм╢рмЧрнБрмбрм╝рм┐рмХрнБ рм╕рнНрм▓рмЯрнНрмЧрнБрмбрм╝рм┐рмХрнБ рмбрнНрм░рм╛рмЧрнН рмХрм░рмирнНрмдрнБ',
            'ЁЯУН рмЕрмВрм╢рмЧрнБрмбрм╝рм┐рмХ рм╕рмарм┐рмХрнН рмХрнНрм░рморм░рнЗ рм░рмЦрм┐рммрм╛ рмЖрммрм╢рнНрнЯрмХ: рммрнНрнЯрм╛рмЯрнЗрм░рнА тЖТ рм╕рнБрмЗрмЪрнН тЖТ рммрм▓рнНрмм тЖТ рмдрм╛рм░',
            'тЬЕ рм╕рмарм┐рмХрнН рмнрм╛рммрм░рнЗ рм░рмЦрм┐рм▓рнЗ рммрм▓рнНрмм рмЬрм│рм┐рмм!',
            'тЭМ рмнрнБрм▓ рмХрнНрм░рмо рм╕рм░рнНрмХрм┐рмЯрмХрнБ рм░рм┐рм╕рнЗрмЯрнН рмХрм░рм┐рмм',
            'ЁЯОп рм╕рм░рнНрмХрм┐рмЯ рм╕рмВрмкрнВрм░рнНрмгрнНрмг рмХрм░рм┐рммрм╛рмХрнБ рмЬрм┐рмдрмирнНрмдрнБ!',
            'ЁЯУ▒ рморнЛрммрм╛рмЗрм▓рм░рнЗ: рмЖрмкрмгрмЩрнНрмХ рмЖрмЩрнНрмЧрнБрмарм┐рм░рнЗ рмЕрмВрм╢рмЧрнБрмбрм╝рм┐рмХрнБ рмбрнНрм░рм╛рмЧрнН рмХрм░рмирнНрмдрнБ'
          ]
        }
      },
      'states-matter': {
        en: {
          title: 'States of Matter - How to Play',
          steps: [
            'ЁЯзК Items will fall from the top of the screen',
            'ЁЯУж Three bins: SOLID, LIQUID, and GAS',
            'ЁЯСЖ Drag each item to the correct bin',
            'тЬЕ Correct placement earns you 10 points',
            'тЭМ Wrong placement shakes the screen',
            'ЁЯОп Sort as many items correctly as possible!',
            'ЁЯУ▒ On mobile: Drag items with your finger'
          ]
        },
        hi: {
          title: 'рдкрджрд╛рд░реНрде рдХреА рдЕрд╡рд╕реНрдерд╛рдПрдБ - рдХреИрд╕реЗ рдЦреЗрд▓реЗрдВ',
          steps: [
            'ЁЯзК рдЖрдЗрдЯрдо рд╕реНрдХреНрд░реАрди рдХреЗ рдКрдкрд░ рд╕реЗ рдЧрд┐рд░реЗрдВрдЧреЗ',
            'ЁЯУж рддреАрди рдмрд┐рди: рдареЛрд╕, рддрд░рд▓ рдФрд░ рдЧреИрд╕',
            'ЁЯСЖ рдкреНрд░рддреНрдпреЗрдХ рдЖрдЗрдЯрдо рдХреЛ рд╕рд╣реА рдмрд┐рди рдореЗрдВ рдЦреАрдВрдЪреЗрдВ',
            'тЬЕ рд╕рд╣реА рдкреНрд▓реЗрд╕рдореЗрдВрдЯ рдЖрдкрдХреЛ 10 рдЕрдВрдХ рджреЗрддрд╛ рд╣реИ',
            'тЭМ рдЧрд▓рдд рдкреНрд▓реЗрд╕рдореЗрдВрдЯ рд╕реНрдХреНрд░реАрди рдХреЛ рд╣рд┐рд▓рд╛рддрд╛ рд╣реИ',
            'ЁЯОп рдЬрд┐рддрдирд╛ рд╕рдВрднрд╡ рд╣реЛ рдЙрддрдиреЗ рдЖрдЗрдЯрдо рдХреЛ рд╕рд╣реА рдврдВрдЧ рд╕реЗ рд╕реЙрд░реНрдЯ рдХрд░реЗрдВ!',
            'ЁЯУ▒ рдореЛрдмрд╛рдЗрд▓ рдкрд░: рдЕрдкрдиреА рдЙрдВрдЧрд▓реА рд╕реЗ рдЖрдЗрдЯрдо рдХреЛ рдЦреАрдВрдЪреЗрдВ'
          ]
        },
        od: {
          title: 'рмкрмжрм╛рм░рнНрме рмЕрммрм╕рнНрмерм╛ - рмХрм┐рмкрм░рм┐ рмЦрнЗрм│рм┐рммрнЗ',
          steps: [
            'ЁЯзК рмЖрмЗрмЯрморнНрмЧрнБрмбрм╝рм┐рмХ рм╕рнНрмХрнНрм░рм┐рмирм░ рмЙрмкрм░рнБ рмкрмбрм╝рм┐рмм',
            'ЁЯУж рмдрм┐рмирнЛрмЯрм┐ рммрм┐рмирнН: рмарнЛрм╕, рмдрм░рм│ рмПрммрмВ рмЧрнНрнЯрм╛рм╕',
            'ЁЯСЖ рмкрнНрм░рмдрнНрнЯрнЗрмХ рмЖрмЗрмЯрмормХрнБ рм╕рмарм┐рмХрнН рммрм┐рмирнНрм░рнЗ рмбрнНрм░рм╛рмЧрнН рмХрм░рмирнНрмдрнБ',
            'тЬЕ рм╕рмарм┐рмХрнН рм╕рнНрмерм╛рмирм┐рмд рмХрм░рм┐рммрм╛ рмЖрмкрмгрмЩрнНрмХрнБ 10 рмкрмПрмгрнНрмЯ рмЕрм░рнНрмЬрми рмХрм░рнЗ',
            'тЭМ рмнрнБрм▓ рм╕рнНрмерм╛рмирм┐рмд рмХрм░рм┐рммрм╛ рм╕рнНрмХрнНрм░рм┐рмирмХрнБ рм╣рм▓рм╛рмЗрмерм╛рмП',
            'ЁЯОп рмпрмерм╛рм╕рморнНрмнрмм рм╕рмарм┐рмХрнН рмнрм╛рммрм░рнЗ рмЕрмирнЗрмХ рмЖрмЗрмЯрморнН рм╕рм░рнНрмЯ рмХрм░рмирнНрмдрнБ!',
            'ЁЯУ▒ рморнЛрммрм╛рмЗрм▓рм░рнЗ: рмЖрмкрмгрмЩрнНрмХ рмЖрмЩрнНрмЧрнБрмарм┐рм░рнЗ рмЖрмЗрмЯрморнНрмЧрнБрмбрм╝рм┐рмХрнБ рмбрнНрм░рм╛рмЧрнН рмХрм░рмирнНрмдрнБ'
          ]
        }
      },
      'plant-parts': {
        en: {
          title: 'Plant Parts - How to Play',
          steps: [
            'ЁЯМ▒ A plant diagram is shown on the screen',
            'ЁЯУЛ Labels for plant parts appear on the left',
            'ЁЯСЖ Click a label (root, stem, leaf, or flower)',
            'ЁЯУН Then click on the plant where that part belongs',
            'тЬЕ Correct placement adds the label to the plant',
            'ЁЯОп Label all parts correctly to win!',
            'ЁЯУ▒ On mobile: Tap labels and plant locations'
          ]
        },
        hi: {
          title: 'рдкреМрдзреЗ рдХреЗ рднрд╛рдЧ - рдХреИрд╕реЗ рдЦреЗрд▓реЗрдВ',
          steps: [
            'ЁЯМ▒ рд╕реНрдХреНрд░реАрди рдкрд░ рдПрдХ рдкреМрдзреЗ рдХрд╛ рдЖрд░реЗрдЦ рджрд┐рдЦрд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ',
            'ЁЯУЛ рдмрд╛рдИрдВ рдУрд░ рдкреМрдзреЗ рдХреЗ рднрд╛рдЧреЛрдВ рдХреЗ рд▓реЗрдмрд▓ рджрд┐рдЦрд╛рдИ рджреЗрддреЗ рд╣реИрдВ',
            'ЁЯСЖ рдПрдХ рд▓реЗрдмрд▓ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ (рдЬрдбрд╝, рддрдирд╛, рдкрддреНрддреА рдпрд╛ рдлреВрд▓)',
            'ЁЯУН рдлрд┐рд░ рдкреМрдзреЗ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдЬрд╣рд╛рдВ рд╡рд╣ рднрд╛рдЧ рд╣реИ',
            'тЬЕ рд╕рд╣реА рдкреНрд▓реЗрд╕рдореЗрдВрдЯ рдкреМрдзреЗ рдореЗрдВ рд▓реЗрдмрд▓ рдЬреЛрдбрд╝рддрд╛ рд╣реИ',
            'ЁЯОп рдЬреАрддрдиреЗ рдХреЗ рд▓рд┐рдП рд╕рднреА рднрд╛рдЧреЛрдВ рдХреЛ рд╕рд╣реА рдврдВрдЧ рд╕реЗ рд▓реЗрдмрд▓ рдХрд░реЗрдВ!',
            'ЁЯУ▒ рдореЛрдмрд╛рдЗрд▓ рдкрд░: рд▓реЗрдмрд▓ рдФрд░ рдкреМрдзреЗ рдХреЗ рд╕реНрдерд╛рдиреЛрдВ рдкрд░ рдЯреИрдк рдХрд░реЗрдВ'
          ]
        },
        od: {
          title: 'рмЧрмЫрм░ рмЕрмВрм╢ - рмХрм┐рмкрм░рм┐ рмЦрнЗрм│рм┐рммрнЗ',
          steps: [
            'ЁЯМ▒ рм╕рнНрмХрнНрм░рм┐рмирм░рнЗ рмПрмХ рмЧрмЫрм░ рмЪрм┐рмдрнНрм░ рмжрнЗрмЦрм╛рмпрм╛рмП',
            'ЁЯУЛ рммрм╛рмо рмкя┐╜я┐╜я┐╜рм░рнНрм╢рнНрн▒рм░рнЗ рмЧрмЫрм░ рмЕрмВрм╢рмЧрнБрмбрм╝рм┐рмХ рмкрм╛рмЗрмБ рм▓рнЗрммрм▓рнН рмжрнЗрмЦрм╛рмпрм╛рмП',
            'ЁЯСЖ рмПрмХ рм▓рнЗрммрм▓рнН рмХрнНрм▓рм┐рмХрнН рмХрм░рмирнНрмдрнБ (рморнВрм│, рмбрм╛рм│, рмкрмдрнНрм░, рмХрм┐рморнНрммрм╛ рмлрнБрм▓)',
            'ЁЯУН рмдрм╛рмкрм░рнЗ рмЧрмЫрм░рнЗ рмХрнНрм▓рм┐рмХрнН рмХрм░рмирнНрмдрнБ рмпрнЗрмЙрмБрмарм┐ рм╕рнЗрм╣рм┐ рмЕрмВрм╢ рмЕрмЫрм┐',
            'тЬЕ рм╕рмарм┐рмХрнН рм╕рнНрмерм╛рмирм┐рмд рмХрм░рм┐рммрм╛ рмЧрмЫрм░рнЗ рм▓рнЗрммрм▓рнН рмпрнЛрмЧ рмХрм░рнЗ',
            'ЁЯОп рмЬрм┐рмдрм┐рммрм╛рмХрнБ рм╕рморм╕рнНрмд рмЕрмВрм╢рмХрнБ рм╕рмарм┐рмХрнН рмнрм╛рммрм░рнЗ рм▓рнЗрммрм▓рнН рмХрм░рмирнНрмдрнБ!',
            'ЁЯУ▒ рморнЛрммрм╛рмЗрм▓рм░рнЗ: рм▓рнЗрммрм▓рнН рмПрммрмВ рмЧрмЫрм░ рм╕рнНрмерм╛рмирмЧрнБрмбрм╝рм┐рмХрм░рнЗ рмЯрнНрнЯрм╛рмкрнН рмХрм░рмирнНрмдрнБ'
          ]
        }
      },
      'food-chain': {
        en: {
          title: 'Food Chain - How to Play',
          steps: [
            'ЁЯМ┐ Build the correct food chain sequence',
            'ЁЯУК Sequence: Grass тЖТ Grasshopper тЖТ Frog тЖТ Snake',
            'ЁЯСЖ Click on items in the correct order',
            'тЬЕ Correct choices turn green',
            'тЭМ Wrong choices shake the screen',
            'ЁЯОп Complete the entire chain to win!',
            'ЁЯУ▒ On mobile: Tap items in sequence'
          ]
        },
        hi: {
          title: 'рдЦрд╛рджреНрдп рд╢реНрд░реГрдВрдЦрд▓рд╛ - рдХреИрд╕реЗ рдЦреЗрд▓реЗрдВ',
          steps: [
            'ЁЯМ┐ рд╕рд╣реА рдЦрд╛рджреНрдп рд╢реНрд░реГрдВрдЦрд▓рд╛ рдЕрдиреБрдХреНрд░рдо рдмрдирд╛рдПрдВ',
            'ЁЯУК рдЕрдиреБрдХреНрд░рдо: рдШрд╛рд╕ тЖТ рдЯрд┐рдбреНрдбрд╛ тЖТ рдореЗрдВрдврдХ тЖТ рд╕рд╛рдВрдк',
            'ЁЯСЖ рд╕рд╣реА рдХреНрд░рдо рдореЗрдВ рдЖрдЗрдЯрдо рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ',
            'тЬЕ рд╕рд╣реА рд╡рд┐рдХрд▓реНрдк рд╣рд░реЗ рд╣реЛ рдЬрд╛рддреЗ рд╣реИрдВ',
            'тЭМ рдЧрд▓рдд рд╡рд┐рдХрд▓реНрдк рд╕реНрдХреНрд░реАрди рдХреЛ рд╣рд┐рд▓рд╛рддреЗ рд╣реИрдВ',
            'ЁЯОп рдЬреАрддрдиреЗ рдХреЗ рд▓рд┐рдП рдкреВрд░реА рд╢реНрд░реГрдВрдЦрд▓рд╛ рдкреВрд░реА рдХрд░реЗрдВ!',
            'ЁЯУ▒ рдореЛрдмрд╛рдЗрд▓ рдкрд░: рдХреНрд░рдо рдореЗрдВ рдЖрдЗрдЯрдо рдкрд░ рдЯреИрдк рдХрд░реЗрдВ'
          ]
        },
        od: {
          title: 'рмЦрм╛рмжрнНрнЯ рм╢рнГрмЦрм│рм╛ - рмХрм┐рмкрм░рм┐ рмЦрнЗрм│рм┐рммрнЗ',
          steps: [
            'ЁЯМ┐ рм╕рмарм┐рмХрнН рмЦрм╛рмжрнНрнЯ рм╢рнГрмЦрм│рм╛ рмХрнНрм░рмо рмирм┐рм░рнНрморм╛рмг рмХрм░рмирнНрмдрнБ',
            'ЁЯУК рмХрнНрм░рмо: рмШрм╛рм╕ тЖТ рмлрмбрм┐рмЩрнНрмЧ тЖТ рммрнЗрмЩрнНрмЧ тЖТ рм╕рм╛рмк',
            'ЁЯСЖ рм╕рмарм┐рмХрнН рмХрнНрм░рморм░рнЗ рмЖрмЗрмЯрморнНрмЧрнБрмбрм╝рм┐рмХрм░рнЗ рмХрнНрм▓рм┐рмХрнН рмХрм░рмирнНрмдрнБ',
            'тЬЕ рм╕рмарм┐рмХрнН рмкрм╕рмирнНрмж рм╕рммрнБрмЬ рм╣рнЛрмЗрмпрм╛рмП',
            'тЭМ рмнрнБрм▓ рмкрм╕рмирнНрмж рм╕рнНрмХрнНрм░рм┐рмирмХрнБ рм╣рм▓рм╛рмЗрмерм╛рмП',
            'ЁЯОп рмЬрм┐рмдрм┐рммрм╛рмХрнБ рм╕рморнНрмкрнВрм░рнНрмгрнНрмг рм╢рнГрмЦрм│рм╛ рм╕рмВрмкрнВрм░рнНрмгрнНрмг рмХрм░рмирнНрмдрнБ!',
            'ЁЯУ▒ рморнЛрммрм╛рмЗрм▓рм░рнЗ: рмХрнНрм░рморм░рнЗ рмЖрмЗрмЯрморнНрмЧрнБрмбрм╝рм┐рмХрм░рнЗ рмЯрнНрнЯрм╛рмкрнН рмХрм░рмирнНрмдрнБ'
          ]
        }
      }
    };

    return instructions[gameId as keyof typeof instructions];
  };

  const games = [
    {
      id: "circuit-connect",
      name: t.circuitConnect,
      description: t.circuitConnectDesc,
      icon: Battery,
      color: "from-yellow-400 to-amber-500",
      bgColor: "from-yellow-50 to-amber-50",
    },
    {
      id: "states-matter",
      name: t.statesMatter,
      description: t.statesMatterDesc,
      icon: Leaf,
      color: "from-green-400 to-emerald-500",
      bgColor: "from-green-50 to-emerald-50",
    },
    {
      id: "plant-parts",
      name: t.plantParts,
      description: t.plantPartsDesc,
      icon: Leaf,
      color: "from-lime-400 to-green-500",
      bgColor: "from-lime-50 to-green-50",
    },
    {
      id: "food-chain",
      name: t.foodChain,
      description: t.foodChainDesc,
      icon: Cpu,
      color: "from-pink-400 to-rose-500",
      bgColor: "from-pink-50 to-rose-50",
    },
  ];

  // How to Play pages
  if (currentGame.startsWith('how-to-')) {
    const gameId = currentGame.replace('how-to-', '');
    const fullGameId = gameId === 'circuit' ? 'circuit-connect' :
                        gameId === 'states' ? 'states-matter' :
                        gameId === 'plant' ? 'plant-parts' :
                        'food-chain';
    const instructions = getGameInstructions(fullGameId);
    const gameInstructions = instructions?.[validLanguage as keyof typeof instructions] || instructions?.en;

    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4">
        <div className="max-w-3xl mx-auto">
          <Button variant="outline" onClick={handleBackToMenu} className="mb-6">
            <ArrowLeft className="w-4 h-4 mr-2" />
            {t.backToMenu}
          </Button>

          <Card className="border-2 shadow-xl">
            <CardHeader className="bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-t-lg">
              <CardTitle className="text-2xl md:text-3xl text-center">
                {gameInstructions?.title}
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6 md:p-8">
              <h3 className="text-xl mb-4">{t.instructions}</h3>
              <div className="space-y-3">
                {gameInstructions?.steps.map((step: string, index: number) => (
                  <div
                    key={index}
                    className="flex items-start gap-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                  >
                    <span className="flex-shrink-0 w-6 h-6 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-full flex items-center justify-center text-sm">
                      {index + 1}
                    </span>
                    <p className="text-gray-700 flex-1">{step}</p>
                  </div>
                ))}
              </div>
              <Button
                onClick={() => setCurrentGame(fullGameId as GameType)}
                className="w-full mt-6 bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white"
                size="lg"
              >
                <Gamepad2 className="w-5 h-5 mr-2" />
                {t.playNow}
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  /* UI: Menu */
  if (currentGame === "menu") {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 via-blue-50 to-green-50 p-4">
        <div className="max-w-6xl mx-auto">
          <Button
            variant="outline"
            onClick={onBack}
            className="mb-6"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            {t.backToDashboard}
          </Button>

          <div className="text-center mb-8">
            <h1 className="text-3xl md:text-4xl mb-2">
              {t.title}
            </h1>
            <p className="text-gray-600">{t.selectGame}</p>
            {userData?.grade && (
              <Badge variant="secondary" className="mt-2">
                Grade {userData.grade} - Difficulty Level{" "}
                {difficulty}
              </Badge>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {games.map((game, index) => {
              const Icon = game.icon as any;
              return (
                <Card
                  key={game.id}
                  className={`hover:shadow-xl transition-all duration-300 bg-gradient-to-br ${game.bgColor} border-2 cursor-pointer transform hover:scale-105`}
                  data-aos="fade-up"
                  data-aos-delay={index * 100}
                >
                  <CardHeader>
                    <div
                      className={`w-16 h-16 mx-auto bg-gradient-to-br ${game.color} rounded-2xl flex items-center justify-center mb-4 shadow-lg`}
                    >
                      <Icon className="w-8 h-8 text-white" />
                    </div>
                    <CardTitle className="text-center text-xl">
                      {game.name}
                    </CardTitle>
                    <CardDescription className="text-center">
                      {game.description}
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="text-center space-y-2">
                    <Button
                      onClick={() =>
                        setCurrentGame(game.id as GameType)
                      }
                      className={`w-full bg-gradient-to-r ${game.color} hover:shadow-lg text-white`}
                    >
                      <Gamepad2 className="w-4 h-4 mr-2" />
                      {t.playNow}
                    </Button>
                    <Button
                      onClick={() => {
                        const howToId = game.id === 'circuit-connect' ? 'how-to-circuit' :
                                       game.id === 'states-matter' ? 'how-to-states' :
                                       game.id === 'plant-parts' ? 'how-to-plant' :
                                       'how-to-food';
                        setCurrentGame(howToId as GameType);
                      }}
                      variant="outline"
                      className="w-full"
                    >
                      ЁЯУЦ {t.howToPlay}
                    </Button>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>
      </div>
    );
  }

  /* UI: Game container + back button + retry button */
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4">
      <div className="max-w-4xl mx-auto">
        <div className="flex gap-2 mb-4">
          <Button
            variant="outline"
            onClick={handleBackToMenu}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            {t.backToGames}
          </Button>
          <Button
            variant="default"
            onClick={handleRetry}
            className="bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white"
          >
            <Zap className="w-4 h-4 mr-2" />
            {t.retry}
          </Button>
        </div>

        <div
          ref={gameContainerRef}
          className="rounded-xl overflow-hidden shadow-2xl border-4 border-white"
          style={{
            maxWidth: "800px",
            margin: "0 auto",
            height: "600px",
          }}
        />

        <div className="mt-6 text-center text-sm text-gray-600">
          <p>
            Use arrow keys тЖР тЖТ or SPACE to interact (if
            applicable)
          </p>
        </div>
      </div>
    </div>
  );
}

/* ===================================================================
   Phaser Scenes for Science (defined inline like in MathGame.tsx)
   Four scenes: CircuitConnectScene, StatesOfMatterScene,
   PlantPartsScene, FoodChainScene
   =================================================================== */

/* 1) CircuitConnectScene */
class CircuitConnectScene extends Phaser.Scene {
  private slots: Phaser.GameObjects.Rectangle[] = [];
  private parts: Phaser.GameObjects.Container[] = [];
  private placedOrder: (string | null)[] = [];
  private correctOrder = ["battery", "switch", "bulb", "wire"];
  private statusText!: Phaser.GameObjects.Text;
  private retryButton?: Phaser.GameObjects.Text;

  constructor(private difficulty: number = 1) {
    super({ key: "CircuitConnectScene" });
  }

  create() {
    globalGameControl.currentScene = this;
    globalGameControl.shouldRestart = false;

    const { width } = this.scale;
    this.add
      .rectangle(width / 2, 32, 760, 64, 0x0b1220)
      .setOrigin(0.5);
    this.add.text(
      20,
      18,
      "Drag parts into the slots to complete the circuit",
      { color: "#fff", fontSize: "16px" },
    );

    // create slots
    const baseX = 120;
    for (let i = 0; i < 4; i++) {
      const slot = this.add
        .rectangle(baseX + i * 170, 160, 140, 80, 0x111827)
        .setStrokeStyle(2, 0x374151);
      slot.setData("index", i);
      slot.setData("occupied", false);
      this.slots.push(slot);
      this.placedOrder[i] = null;
    }

    // create parts row (shuffled)
    const keys = Phaser.Utils.Array.Shuffle([
      "battery",
      "switch",
      "bulb",
      "wire",
    ]);
    keys.forEach((k, idx) => {
      const cont = this.createPart(k, 120 + idx * 170, 340);
      this.parts.push(cont);
    });

    this.statusText = this.add
      .text(
        this.scale.width / 2,
        480,
        "Place parts in correct order",
        { fontSize: "18px", color: "#ffd" },
      )
      .setOrigin(0.5);
  }

  private createPart(key: string, x: number, y: number) {
    const box = this.add
      .rectangle(0, 0, 120, 56, 0x06b6d4)
      .setStrokeStyle(2, 0x083344);
    const label = this.add
      .text(0, 0, key.toUpperCase(), {
        color: "#061423",
        fontSize: "14px",
      })
      .setOrigin(0.5);
    const container = this.add.container(x, y, [box, label]);
    container.setSize(120, 56);
    container.setInteractive(
      new Phaser.Geom.Rectangle(-60, -28, 120, 56),
      Phaser.Geom.Rectangle.Contains,
    );
    this.input.setDraggable(container);

    // save start pos
    (container as any).startX = x;
    (container as any).startY = y;

    container.on("drag", (_p: any, dx: number, dy: number) => {
      container.x = dx;
      container.y = dy;
    });

    container.on("dragend", () => {
      let snapped = false;
      for (const s of this.slots) {
        const dist = Phaser.Math.Distance.Between(
          container.x,
          container.y,
          s.x,
          s.y,
        );
        if (dist < 80 && !s.getData("occupied")) {
          container.x = s.x;
          container.y = s.y;
          s.setData("occupied", true);
          s.setData("partKey", key);
          this.placedOrder[s.getData("index")] = key;
          snapped = true;
          break;
        }
      }
      if (!snapped) {
        this.tweens.add({
          targets: container,
          x: (container as any).startX,
          y: (container as any).startY,
          duration: 260,
          ease: "Back.easeOut",
        });
      }
      this.checkCircuit();
    });

    return container;
  }

  private checkCircuit() {
    if (this.placedOrder.some((v) => v === null)) return;
    const ok = this.correctOrder.every(
      (c, i) => this.placedOrder[i] === c,
    );
    if (ok) {
      this.statusText.setText(
        "тЬЕ Circuit Complete! Bulb is ON",
      );
      const bulbSlot = this.slots[2];
      this.tweens.add({
        targets: bulbSlot,
        fillAlpha: { from: 0.6, to: 1 },
        duration: 300,
        yoyo: true,
        repeat: 4,
      });
      this.parts.forEach((p) => p.disableInteractive?.());
      
      // Show retry button
      this.showRetryButton();
    } else {
      this.statusText.setText("тЭМ Incorrect тАФ resetting");
      this.time.delayedCall(
        700,
        () => {
          this.placedOrder = [null, null, null, null];
          this.slots.forEach((s) =>
            s.setData("occupied", false),
          );
          this.parts.forEach((p: any) => {
            this.tweens.add({
              targets: p,
              x: p.startX,
              y: p.startY,
              duration: 300,
              ease: "Back.easeOut",
            });
          });
          this.statusText.setText(
            "Place parts in correct order",
          );
        },
        [],
        this,
      );
    }
  }

  private showRetryButton() {
    this.retryButton = this.add
      .text(this.scale.width / 2, 540, "ЁЯФД RETRY", {
        fontSize: "20px",
        color: "#fff",
        backgroundColor: "#10b981",
        padding: { x: 20, y: 10 },
      })
      .setOrigin(0.5)
      .setInteractive({ useHandCursor: true });

    this.retryButton.on("pointerdown", () => {
      this.scene.restart();
    });
  }
}

/* 2) StatesOfMatterScene */
class StatesOfMatterScene extends Phaser.Scene {
  private bins: {
    key: string;
    rect: Phaser.GameObjects.Rectangle;
  }[] = [];
  private itemsGroup!: Phaser.GameObjects.Group;
  private score = 0;
  private scoreText!: Phaser.GameObjects.Text;
  private spawnEvent?: Phaser.Time.TimerEvent;

  constructor(private difficulty: number = 1) {
    super({ key: "StatesOfMatterScene" });
  }

  create() {
    globalGameControl.currentScene = this;
    globalGameControl.shouldRestart = false;

    const { width } = this.scale;
    this.add.text(
      20,
      20,
      "Drag items into Solid / Liquid / Gas",
      { color: "#fff" },
    );

    const keys = ["solid", "liquid", "gas"];
    keys.forEach((k, i) => {
      const x = 160 + i * 240;
      const rect = this.add
        .rectangle(x, 160, 220, 140, 0x111827)
        .setStrokeStyle(2, 0x374151);
      this.add
        .text(x, 140, k.toUpperCase(), { color: "#fff" })
        .setOrigin(0.5);
      this.bins.push({ key: k, rect });
    });

    this.itemsGroup = this.add.group();
    this.scoreText = this.add.text(
      width - 140,
      24,
      "Score: 0",
      { fontSize: "18px", color: "#ffd" },
    );

    this.spawnEvent = this.time.addEvent({
      delay: 1200,
      callback: this.spawnItem,
      callbackScope: this,
      loop: true,
    });
  }

  private spawnItem() {
    const types = [
      { label: "Ice", kind: "solid" },
      { label: "Steam", kind: "gas" },
      { label: "Water", kind: "liquid" },
      { label: "Metal", kind: "solid" },
      { label: "Vapor", kind: "gas" },
      { label: "Milk", kind: "liquid" },
    ];
    const pick = Phaser.Math.RND.pick(types);
    const x = Phaser.Math.Between(80, this.scale.width - 80);
    const cont = this.add.container(x, -20);
    const circle = this.add.circle(0, 0, 28, 0x4ecdc4);
    const text = this.add
      .text(0, 0, pick.label, {
        fontSize: "14px",
        color: "#000",
      })
      .setOrigin(0.5);
    cont.add([circle, text]);
    cont.setSize(60, 60);
    cont.setData("kind", pick.kind);
    cont.setInteractive();
    this.input.setDraggable(cont);
    this.itemsGroup.add(cont);

    // drop down
    this.tweens.add({
      targets: cont,
      y: 260,
      duration: 1400,
      ease: "Quad.easeIn",
    });

    cont.on("drag", (_p: any, dx: number, dy: number) => {
      cont.x = dx;
      cont.y = dy;
    });

    cont.on("dragend", () => {
      for (const b of this.bins) {
        if (
          Phaser.Geom.Rectangle.Contains(
            b.rect.getBounds(),
            cont.x,
            cont.y,
          )
        ) {
          this.checkDrop(cont, b.key);
          return;
        }
      }
      // else return
      this.tweens.add({
        targets: cont,
        y: 260,
        duration: 300,
        ease: "Back.easeOut",
      });
    });
  }

  private checkDrop(
    item: Phaser.GameObjects.Container,
    binKey: string,
  ) {
    const kind = item.getData("kind");
    if (kind === binKey) {
      this.score += 10;
      this.scoreText.setText(`Score: ${this.score}`);
      this.tweens.add({
        targets: item,
        scale: 0.4,
        alpha: 0,
        duration: 300,
        onComplete: () => item.destroy(),
      });
    } else {
      this.cameras.main.shake(200, 0.01);
      this.tweens.add({
        targets: item,
        x: Phaser.Math.Between(80, this.scale.width - 80),
        y: 260,
        duration: 300,
      });
    }
  }
}

/* 3) PlantPartsScene */
class PlantPartsScene extends Phaser.Scene {
  private labels: Phaser.GameObjects.Text[] = [];
  private slots = [
    { name: "root", x: 300, y: 420, filled: false },
    { name: "stem", x: 300, y: 340, filled: false },
    { name: "leaf", x: 380, y: 300, filled: false },
    { name: "flower", x: 300, y: 220, filled: false },
  ];
  private feedback!: Phaser.GameObjects.Text;
  private score = 0;
  private selectedLabel?: Phaser.GameObjects.Text;

  constructor(private difficulty: number = 1) {
    super({ key: "PlantPartsScene" });
  }

  create() {
    globalGameControl.currentScene = this;
    globalGameControl.shouldRestart = false;

    const { width } = this.scale;
    this.add.text(
      20,
      20,
      "Click a label then click the plant where it belongs",
      { color: "#fff" },
    );

    // simple plant drawing
    const g = this.add.graphics();
    g.fillStyle(0x6b8e23, 1);
    g.fillRect(280, 320, 40, 120);
    g.fillStyle(0x228b22, 1);
    g.fillEllipse(300, 300, 140, 60);
    g.fillStyle(0xff69b4, 1);
    g.fillEllipse(300, 200, 60, 60);

    const names = ["root", "stem", "leaf", "flower"];
    names.forEach((n, i) => {
      const l = this.add
        .text(40, 100 + i * 44, n.toUpperCase(), {
          backgroundColor: "#fff",
          color: "#000",
          padding: { x: 8, y: 6 },
        })
        .setInteractive();
      l.on("pointerdown", () => this.preparePlaceLabel(n, l));
      this.labels.push(l);
    });

    this.feedback = this.add
      .text(width / 2, 520, "Score: 0", {
        color: "#ffd",
        fontSize: "20px",
      })
      .setOrigin(0.5);
  }

  private preparePlaceLabel(
    name: string,
    labelObj: Phaser.GameObjects.Text,
  ) {
    this.selectedLabel = labelObj;
    labelObj.setAlpha(0.6);

    this.input.once(
      "pointerdown",
      (p: Phaser.Input.Pointer) => {
        const slot = this.slots.find(
          (s) => s.name === name && !s.filled,
        );
        if (!slot) {
          labelObj.setAlpha(1);
          return;
        }
        this.add
          .text(slot.x, slot.y, name.toUpperCase(), {
            color: "#000",
            backgroundColor: "#fff",
            padding: { x: 6, y: 4 },
          })
          .setOrigin(0.5);
        slot.filled = true;
        labelObj.destroy();
        this.score += 10;
        this.feedback.setText(`Score: ${this.score}`);
        this.selectedLabel = undefined;

        // Check if all slots filled
        if (this.slots.every(s => s.filled)) {
          this.showRetryButton();
        }
      },
    );
  }

  private showRetryButton() {
    this.add
      .text(this.scale.width / 2, 560, "ЁЯФД RETRY", {
        fontSize: "20px",
        color: "#fff",
        backgroundColor: "#10b981",
        padding: { x: 20, y: 10 },
      })
      .setOrigin(0.5)
      .setInteractive({ useHandCursor: true })
      .on("pointerdown", () => {
        this.scene.restart();
      });
  }
}

/* 4) FoodChainScene */
class FoodChainScene extends Phaser.Scene {
  private chain = ["grass", "grasshopper", "frog", "snake"];
  private currentIndex = 0;
  private items: Phaser.GameObjects.Text[] = [];
  private status!: Phaser.GameObjects.Text;

  constructor(private difficulty: number = 1) {
    super({ key: "FoodChainScene" });
  }

  create() {
    globalGameControl.currentScene = this;
    globalGameControl.shouldRestart = false;

    const { width } = this.scale;
    this.add.text(
      20,
      20,
      "Click the next animal in the food chain sequence",
      { color: "#fff" },
    );

    this.status = this.add
      .text(width / 2, 520, "Start with GRASS", {
        color: "#ffd",
        fontSize: "18px",
      })
      .setOrigin(0.5);

    const pool = [
      "grass",
      "rabbit",
      "grasshopper",
      "frog",
      "snake",
      "bird",
    ];
    pool.forEach((p, i) => {
      const t = this.add
        .text(80 + i * 110, 360, p.toUpperCase(), {
          backgroundColor: "#fff",
          color: "#000",
          padding: { x: 8, y: 6 },
        })
        .setInteractive();
      t.on("pointerdown", () => this.onPick(p, t));
      this.items.push(t);
    });

    this.add
      .text(
        width / 2,
        120,
        "Sequence: Grass тЖТ Grasshopper тЖТ Frog тЖТ Snake",
        { color: "#fff" },
      )
      .setOrigin(0.5);
  }

  private onPick(
    pick: string,
    textObj: Phaser.GameObjects.Text,
  ) {
    const expected = this.chain[this.currentIndex];
    if (pick === expected) {
      textObj.setStyle({ backgroundColor: "#00ff88" });
      this.currentIndex++;
      if (this.currentIndex >= this.chain.length) {
        this.status.setText("ЁЯОЙ Chain completed!");
        this.showRetryButton();
      } else {
        this.status.setText(
          `Good! Next: ${this.chain[this.currentIndex].toUpperCase()}`,
        );
      }
    } else {
      this.cameras.main.shake(200, 0.01);
      this.status.setText(
        `тЭМ Wrong! You needed ${expected.toUpperCase()}`,
      );
    }
  }

  private showRetryButton() {
    this.add
      .text(this.scale.width / 2, 560, "ЁЯФД RETRY", {
        fontSize: "20px",
        color: "#fff",
        backgroundColor: "#10b981",
        padding: { x: 20, y: 10 },
      })
      .setOrigin(0.5)
      .setInteractive({ useHandCursor: true })
      .on("pointerdown", () => {
        this.scene.restart();
      });
  }
}